<!-- vim: syntax=markdown -->

# Day 19

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2023adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day19 do
  def solve(text) do
    [workflow, ratings] = AOC.as_doublespaced_paragraphs(text)

    # px{a<2006:qkq,m>2090:A,rfg}
    workflow =
      workflow
      |> AOC.as_single_lines()
      |> Enum.reduce(%{}, fn line, acc ->
        [name, flows] = String.split(line, "{", trim: true)

        [last | flows] =
          flows
          |> String.split(",", trim: true)
          |> Enum.reverse()

        flows =
          flows
          |> Enum.map(fn flow ->
            [equation, destination] = String.split(flow, ":", trim: true)
          end)
      end)
  end

  def solve2(text) do
    text
  end
end

p1data.()
|> Day19.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 19114)")

#

# p1data.()
# |> Day19.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: )")

#
```
