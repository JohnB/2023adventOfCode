<!-- vim: syntax=markdown -->

# Day 06

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day06 do
  def solve(text) do
    times_and_distances =
      AOC.as_single_lines(text)
      |> Enum.map(fn line ->
        [_title, data] = String.split(line, ":")

        data
        |> String.split(~r/\W/, trim: true)
        |> Enum.map(&String.to_integer/1)
      end)
      |> Enum.zip()

    times_and_distances
    |> Enum.reduce(1, fn {time, distance}, acc ->
      wins =
        1..time
        |> Enum.filter(fn n -> n * (time - n) > distance end)

      acc * Enum.count(wins)
    end)
  end

  def solve2(text) do
    [time, distance] =
      AOC.as_single_lines(text)
      |> Enum.map(fn line ->
        [_title, data] = String.split(line, ":")

        # IO.puts(title)
        data
        |> String.replace(~r/\W/, "", trim: true)
        |> String.to_integer()
      end)

    # Brute force algorithm.
    wins =
      1..time
      |> Enum.filter(fn n -> n * (time - n) > distance end)

    # |> IO.inspect(label: "winning times")
    Enum.count(wins)
  end
end

p1data.()
|> Day06.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 288)")

# 6 10 12 12 10 6
# 503424

p1data.()
|> Day06.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 71503)")

# 32607562
```
