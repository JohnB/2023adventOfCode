<!-- vim: syntax=markdown -->

# Day 21

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

### Day 21: Monkey Math

The monkeys are back! You're worried they're going to try to steal your stuff again, but it seems like they're just holding their ground and making various monkey noises at you.

Eventually, one of the elephants realizes you don't speak monkey and comes over to interpret. As it turns out, they overheard you talking about trying to find the grove; they can show you a shortcut if you answer their riddle.

Each monkey is given a job: either to yell a specific number or to yell the result of a math operation. All of the number-yelling monkeys know their number from the start; however, the math operation monkeys need to wait for two other monkeys to yell a number, and those two other monkeys might also be waiting on other monkeys.

Your job is to work out the number the monkey named root will yell before the monkeys figure it out themselves.

For example:

```
root: pppw + sjmn
dbpl: 5
cczh: sllz + lgvd
zczc: 2
ptdq: humn - dvpt
dvpt: 3
lfqf: 4
humn: 5
ljgn: 2
sjmn: drzm * dbpl
sllz: 4
pppw: cczh / lfqf
lgvd: ljgn * ptdq
drzm: hmdt - zczc
hmdt: 32
```

Each line contains the name of a monkey, a colon, and then the job of that monkey:

* A lone number means the monkey's job is simply to yell that number.
* A job like aaaa + bbbb means the monkey waits for monkeys aaaa and bbbb to yell each of their numbers; the monkey then yells the sum of those two numbers.
* aaaa - bbbb means the monkey yells aaaa's number minus bbbb's number.
* Job aaaa * bbbb will yell aaaa's number multiplied by bbbb's number.
* Job aaaa / bbbb will yell aaaa's number divided by bbbb's number.

So, in the above example, monkey drzm has to wait for monkeys hmdt and zczc to yell their numbers. Fortunately, both hmdt and zczc have jobs that involve simply yelling a single number, so they do this immediately: 32 and 2. Monkey drzm can then yell its number by finding 32 minus 2: 30.

Then, monkey sjmn has one of its numbers (30, from monkey drzm), and already has its other number, 5, from dbpl. This allows it to yell its own number by finding 30 multiplied by 5: 150.

This process continues until root yells a number: 152.

However, your actual situation involves considerably more monkeys. What number will the monkey named root yell?

<!-- livebook:{"break_markdown":true} -->

###

<!-- livebook:{"break_markdown":true} -->

###

```elixir
defmodule Day21 do
  # @operators ~w(+ - * /)
  @mapper ~r/(?<name>.+): (((?<lefty>[a-z]+) (?<operator>.) (?<righty>[a-z+]+))|(?<num>\d+))/

  def add_or_update_named_monkey(monkeytroop, monkey) do
    get_and_update_in(monkeytroop, [monkey["name"]], fn current ->
      case current do
        nil -> {current, monkey}
        _ -> {current, Map.merge(current, monkey)}
      end
    end)
    |> elem(1)
  end

  def add_or_update_lefty(monkeytroop, monkey) do
    get_and_update_in(monkeytroop, [monkey["lefty"]], fn current ->
      case current do
        nil -> {current, monkey}
        _ -> {current, Map.merge(current, monkey)}
      end
    end)
    |> elem(1)
  end

  def add_or_update_righty(monkeytroop, monkey) do
    get_and_update_in(monkeytroop, [monkey["righty"]], fn current ->
      case current do
        nil -> {current, monkey}
        _ -> {current, Map.merge(current, monkey)}
      end
    end)
    |> elem(1)
  end

  def yell_or_wait(monkeytroop, monkey) do
    if monkey["num"] != "" do
      IO.puts("Monkey #{monkey["name"]} yells #{monkey["num"]}!")
    else
      IO.puts("Wait for #{monkey["lefty"]} and #{monkey["righty"]}!")
    end

    monkeytroop
  end

  def parse_monkeys(monkeytroop, monkey) do
    monkeytroop
    |> add_or_update_named_monkey(monkey)
    |> add_or_update_lefty(monkey)
    |> add_or_update_righty(monkey)
  end

  def listen_to_monkeys(monkeytroop, monkey) do
    monkeytroop
    |> yell_or_wait(monkey)
  end

  def maybe_add_depends_on(%{"lefty" => ""} = monkey), do: monkey

  def maybe_add_depends_on(%{"lefty" => lefty, "righty" => righty} = monkey) do
    put_in(monkey, ["depends_on"], [lefty, righty])
  end

  def maybe_integize(%{"num" => ""} = monkey), do: monkey

  def maybe_integize(%{"num" => num} = monkey),
    do: put_in(monkey, ["num"], String.to_integer(num))

  def parse_line(line) do
    _monkey =
      Regex.named_captures(@mapper, line)
      |> maybe_integize()
      |> maybe_add_depends_on()
  end

  def finish_dependencies(monkeytroop) do
    monkeytroop
    |> Enum.reduce(monkeytroop, fn {k, v}, acc ->
      if is_nil(v["depends_on"]) do
        acc
      else
        acc
        |> get_and_update_in([v["lefty"], "is_dependent_on"], fn current ->
          {current, [current || []] ++ [k]}
        end)
        |> elem(1)
        |> get_and_update_in([v["righty"], "is_dependent_on"], fn current ->
          {current, [current || []] ++ [k]}
        end)
        |> elem(1)
      end
    end)
  end

  def solve(text) do
    monkeytroop =
      text
      |> AOC.as_single_lines()
      |> Enum.reduce(%{}, fn line, acc ->
        monkey =
          parse_line(line)
          |> IO.inspect(label: "\n--- after parse_line()")

        parse_monkeys(acc, monkey)
        |> IO.inspect(label: "after parse_monkeys()")
      end)

    # |> finish_dependencies()
    # |> IO.inspect(label: "after finish_dependencies()")

    text
    |> AOC.as_single_lines()
    |> Enum.each(fn line ->
      name = String.slice(line, 0, 4)
      listen_to_monkeys(monkeytroop, monkeytroop[name])
    end)

    "DONE"
  end

  def solve2(_text) do
  end
end

p1data.()
|> Day21.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 152)")

# 1669

# p1data.()
# |> Day21.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: )")

#
```

### Part Two
