<!-- vim: syntax=markdown -->

# Day 03

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day03.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day03 do
  def solve(text) do
    text
    # |> AOC.as_single_lines()
    # |> Enum.map(fn line ->
    #   half = div(String.length(line), 2)

    #   left = half_set(line, 0..(half - 1))
    #   right = half_set(line, half..(2 * half + 1))
    #   MapSet.intersection(left, right)
    # end)
    # |> Enum.map(fn mapset ->
    #   mapset
    #   |> MapSet.to_list()
    #   |> hd
    #   |> char_score()
    # end)
    # |> Enum.sum()
  end

  def solve2(text) do
    text
    # |> AOC.as_single_lines()
    # |> Enum.chunk_every(3)
    # |> Enum.map(fn group ->
    #   [elf1, elf2, elf3] =
    #     group
    #     |> Enum.map(fn rucksack ->
    #       rucksack
    #       |> String.split("", trim: true)
    #       |> MapSet.new()
    #     end)

    #   MapSet.intersection(elf1, elf2)
    #   |> MapSet.intersection(elf3)
    #   |> MapSet.to_list()
    #   |> hd
    #   |> char_score()
    # end)
    # |> Enum.sum()
  end
end

p1data.()
|> Day03.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: )")

# 

p1data.()
|> Day03.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: )")

# 
```
