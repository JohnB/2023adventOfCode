<!-- vim: syntax=markdown -->

# Day 10

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2023adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day10 do
  def display_grid(grid, text \\ nil) do
    text && IO.puts("--- #{text}")

    0..grid.last_cell
    |> Enum.chunk_every(grid.grid_width)
    # |> IO.inspect(label: "Grid chunks")
    |> Enum.map(fn indexes ->
      indexes
      |> Enum.map(fn index ->
        # For a known-printable grid:
        grid[index]
        # For a somewhat-printable grid:
        # (grid[index] >= @max_display) && "." || (@ascii_zero + grid[index])
      end)
      |> Enum.join("")
      |> IO.puts()
    end)

    # |> IO.puts()
  end

  def finish(grid: grid, path: path) do
    display_grid(grid, "FINISHED")
    %{grid: grid, path: path}
  end

  # path cell
  @x "X"
  # Outside
  @o "O"
  # Inside
  @i "I"

  def move_up(grid, path, up) do
    # IO.inspect(path, label: "up to #{up} #{grid[up]}")

    case grid[up] do
      "S" -> finish(grid: grid, path: path)
      "|" -> move_up(grid, [up | path], up - grid.grid_width)
      "7" -> move_left(grid, [up | path], up - 1)
      "F" -> move_right(grid, [up | path], up + 1)
      _ -> nil
    end
  end

  def move_left(grid, path, left) do
    case grid[left] do
      "S" -> finish(grid: grid, path: path)
      "-" -> move_left(grid, [left | path], left - 1)
      "L" -> move_up(grid, [left | path], left - grid.grid_width)
      "F" -> move_down(grid, [left | path], left + grid.grid_width)
      _ -> nil
    end
  end

  def move_right(grid, path, right) do
    case grid[right] do
      "S" -> finish(grid: grid, path: path)
      "-" -> move_right(grid, [right | path], right + 1)
      "7" -> move_down(grid, [right | path], right + grid.grid_width)
      "J" -> move_up(grid, [right | path], right - grid.grid_width)
      _ -> nil
    end
  end

  def move_down(grid, path, down) do
    case grid[down] do
      "S" -> finish(grid: grid, path: path)
      "|" -> move_down(grid, [down | path], down + grid.grid_width)
      "L" -> move_right(grid, [down | path], down + 1)
      "J" -> move_left(grid, [down | path], down - 1)
      _ -> nil
    end
  end

  def solve(text) do
    grid = AOC.as_grid(text)
    display_grid(grid)

    start =
      0..grid.last_cell
      |> Enum.find(fn cell -> grid[cell] == "S" end)

    %{grid: grid, path: path} =
      move_up(grid, [start], start - grid.grid_width) ||
        (rem(start, grid.grid_width) != 0 && move_left(grid, [start], start - 1)) ||
        (rem(start + 1, grid.grid_width) != 0 && move_right(grid, [start], start + 1)) ||
        move_down(grid, [start], start + grid.grid_width)

    # convert to a map-of-maps so each path cell can get its own
    # unique segment number - and multiple horizontal segments
    # get the same value - so we can check the in/out of each cell
    grid2 =
      grid
      |> Enum.reduce(grid, fn {k, v}, acc ->
        # Mark everything as "Outside"
        Map.put(acc, k, %{value: (k in path && v) || @o, segment: nil})
      end)
      |> IO.inspect(label: "map-o-maps")

    {grid2, seg} =
      path
      |> Enum.reduce({grid2, 0}, fn path_cell, {acc, segment} ->
        IO.inspect([path_cell, segment, acc[path_cell]])

        case acc[path_cell].value do
          "|" -> {Map.put(acc, path_cell, %{acc[path_cell] | segment: segment}), segment}
          "-" -> {Map.put(acc, path_cell, %{acc[path_cell] | segment: segment}), segment}
          _ -> {Map.put(acc, path_cell, %{acc[path_cell] | segment: segment}), segment + 1}
        end
      end)

    IO.inspect([grid.last_cell, grid.grid_width], label: "grid2")
    display_grid(grid2, "local display_grid")

    # (0..grid.last_cell)
    # |> Enum.chunk_every(grid.grid_width)
    # |> Enum.reduce({0, :outside}, fn indexes, {in_count, where} = acc ->
    #   |> Enum.reduce(acc, fn index, {in_count2, where2} ->
    #     case {where, grid2[index]} do

    #     end
    #   end)
    # end)
  end

  def solve2(_text) do
    # grid = AOC.as_grid(text)

    # display_grid(grid, "local display_grid")
    nil
  end
end

p1data.()
|> Day10.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 8)")

# 6613

p1data.()
|> Day10.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: )")

#
```
