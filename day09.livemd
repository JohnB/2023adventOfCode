<!-- vim: syntax=markdown -->

# Day 09

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day09 do
  def calculate_diffs(nums) do
    Enum.chunk_every(nums, 2, 1, :discard)
    |> Enum.map(fn [a, b] -> b - a end)
  end

  def all_zeros?(nums) do
    Enum.all?(nums, fn n -> n == 0 end)
  end

  def find_next_in_sequence(nums) do
    if all_zeros?(nums) do
      0
    else
      diffs = calculate_diffs(nums)
      num = find_next_in_sequence(diffs)
      List.last(nums) + num
    end
  end

  def find_prev_in_sequence(nums) do
    if all_zeros?(nums) do
      0
    else
      diffs = calculate_diffs(nums)
      num = find_prev_in_sequence(diffs)
      List.first(nums) - num
    end
  end

  def solve(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.map(fn line ->
      nums = AOC.delimited_by_spaces(line) |> Enum.map(&String.to_integer/1)
      find_next_in_sequence(nums)
    end)
    |> Enum.sum()
  end

  def solve2(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.map(fn line ->
      nums = AOC.delimited_by_spaces(line) |> Enum.map(&String.to_integer/1)
      find_prev_in_sequence(nums)
    end)
    |> Enum.sum()
  end
end

p1data.()
|> Day09.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 114)")

# 1842168671

p1data.()
|> Day09.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 2)")

# 903
```
