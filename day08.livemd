<!-- vim: syntax=markdown -->

# Day 08

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])

IEx.Helpers.c("/Users/johnb/dev/2022adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day08 do
  def add_node(<<node::24, " = ", left::24, ", ", right::24>>, acc) do
    Map.put(acc, node, %{"L" => left, "R" => right})
  end

  def solve(text) do
    [directions, maps] = AOC.as_doublespaced_paragraphs(text)
    directions = String.split(directions, "", trim: true)

    maps =
      maps
      |> AOC.as_single_lines()
      # << header :: 8, length :: 32, message ::
      # HGL = (LNC, LQT)
      |> Enum.reduce(%{}, fn <<node::24, " = (", left::24, ", ", right::24, ")">>, acc ->
        Map.put(acc, node, %{"L" => left, "R" => right})
      end)

    Stream.cycle(directions)
    |> Enum.reduce_while({4_276_545, 0}, fn dir, {node, steps} ->
      case node do
        5_921_370 -> {:halt, steps}
        _ -> {:cont, {maps[node][dir], steps + 1}}
      end
    end)
  end

  def solve2(text) do
    String.length(text)
  end
end

p1data.()
|> Day08.solve()
|> IO.inspect(label: "\n*** Part 1 solution (example: 6)")

#

p1data.()
|> Day08.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: )")

#
```
